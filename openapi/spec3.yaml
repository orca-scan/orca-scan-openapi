openapi: 3.1.0
info:
  title: Orca Scan REST API
  version: "1.0"
  description: |
    OpenAPI extracted from the Orca Scan REST API guide
    Source: https://orcascan.com/guides/rest-api-f09a21c3
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://api.orcascan.com/v1
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: API-KEY
  parameters:
    SheetId:
      name: sheetId
      in: path
      required: true
      schema: { type: string }
    RowId:
      name: rowId
      in: path
      required: true
      schema: { type: string }
    UserId:
      name: userId
      in: path
      required: true
      schema: { type: string }
    HookId:
      name: hookId
      in: path
      required: true
      schema: { type: string }
    FieldKey:
      name: fieldKey
      in: path
      required: true
      schema: { type: string }
    Partial:
      name: partial
      in: query
      required: false
      description: If true, only provided fields are updated (others remain unchanged)
      schema: { type: boolean, default: false }
  schemas:
    ApiError:
      type: object
      properties:
        status: { type: integer }
        error: { type: string }
        message: { type: string }
      required: [status, error, message]
    SheetSummary:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        isOwner: { type: boolean }
        canAdmin: { type: boolean }
        canUpdate: { type: boolean }
        canDelete: { type: boolean }
        canExport: { type: boolean }
      required: [_id, name]
    SheetSettings:
      type: object
      properties:
        allowPublicExport: { type: boolean }
        publicExportUrl: { type: string }
        allowPublicEntry: { type: boolean }
        publicEntryUrl: { type: string }
        allowWebHookIn: { type: boolean }
        webHookInUrl: { type: string }
        lookupUrl: { type: string }
        validationUrl: { type: string }
        webHookOutUrl: { type: string }
        secret: { type: string }
        dateTimeFormat: { type: string }
    Row:
      type: object
      description: Dynamic row object; keys map to your sheet fields
      properties:
        _id: { type: string }
        barcode: { type: string }
        name: { type: string }
        quantity:
          oneOf:
            - { type: string }
            - { type: number }
        description: { type: string }
        date: { type: string, format: date-time }
        location: { type: string, description: "lat, lon" }
        photo:
          oneOf:
            - { type: string, format: uri }
            - { type: string, description: "base64 data URI or base64 string", contentEncoding: base64 }
      additionalProperties: true
    RowIdList:
      type: array
      items: { type: string }
    HistoryEntry:
      type: object
      properties:
        _id: { type: string }
        barcode: { type: string }
        name: { type: string }
        quantity:
          oneOf:
            - { type: number }
            - { type: string }
        _change: { type: string, enum: [add, update, delete] }
        _changedBy: { type: string }
        _changedOn: { type: string, format: date-time }
        _changedUsing: { type: string }
    User:
      type: object
      properties:
        _id: { type: string }
        email: { type: string, format: email }
        owner: { type: boolean }
        canUpdate: { type: boolean }
        canDelete: { type: boolean }
        canExport: { type: boolean }
        canAdmin: { type: boolean }
      required: [email]
    Hook:
      type: object
      properties:
        _id: { type: string }
        eventName: { type: string }
        sheetId: { type: string }
        targetUrl: { type: string, format: uri }
      required: [eventName, targetUrl]
    Field:
      type: object
      properties:
        key: { type: string, readOnly: true }
        label: { type: string }
        type: { type: string }
        format: { type: string, description: "field type label, e.g. text, drop-down list, gps location" }
        default: {}
        listOptions:
          type: array
          items: { type: string }
        multiSelect: { type: boolean }
        formula: { type: string }
        locked: { type: boolean }
        minLength: { type: integer }
        maxLength: { type: integer }
        minimum: { type: number }
        maximum: { type: number }
        placeholder: { type: string }
        prefix: { type: string }
        suffix: { type: string }
        length: { type: integer }
        required: { type: boolean }
        autofocus: { type: boolean }
        autoselect: { type: boolean }
        emptyOnEdit: { type: boolean }
        emptyOnScan: { type: boolean }
        hiddenMobile: { type: boolean }
        hiddenWeb: { type: boolean }
        readonlyWeb: { type: boolean }
        readonlyMobile: { type: boolean }
        useInMobileSearch: { type: boolean }
        useValueInList: { type: boolean }
  responses:
    ErrorResponse:
      description: Error
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ApiError" }

tags:
  - name: Sheets
    description: Sheet operations
  - name: Rows
    description: Row CRUD operations
  - name: History
    description: History retrieval
  - name: Users
    description: Sheet users operations
  - name: Hooks
    description: Webhook operations
  - name: Fields
    description: Sheet fields operations

paths:
  /sheets:
    get:
      tags: [Sheets]
      summary: Get list of sheets
      operationId: getSheets
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/SheetSummary" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }
    post:
      tags: [Sheets]
      summary: Create a sheet
      operationId: createSheet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                templateName: { type: string }
              required: [name]
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      _id: { type: string }
                      name: { type: string }
                      rows: { type: integer }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }

  /sheets/{sheetId}/settings:
    get:
      tags: [Sheets]
      summary: Get sheet settings
      operationId: getSheetSettings
      parameters: [ { $ref: "#/components/parameters/SheetId" } ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: "#/components/schemas/SheetSettings" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }

  /sheets/{sheetId}/clear:
    put:
      tags: [Sheets]
      summary: Removes all rows from a sheet
      operationId: clearSheet
      parameters: [ { $ref: "#/components/parameters/SheetId" } ]
      responses:
        "204": { description: Cleared }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }

  /sheets/{sheetId}/rename:
    put:
      tags: [Sheets]
      summary: Rename a sheet
      operationId: renameSheet
      parameters: [ { $ref: "#/components/parameters/SheetId" } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
              required: [name]
      responses:
        "200": { description: OK }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }

  /sheets/{sheetId}:
    delete:
      tags: [Sheets]
      summary: Delete a sheet
      operationId: deleteSheet
      parameters: [ { $ref: "#/components/parameters/SheetId" } ]
      responses:
        "204": { description: Deleted }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }

  /sheets/{sheetId}/rows:
    get:
      tags: [Rows]
      summary: Get all rows
      operationId: getRows
      parameters: [ { $ref: "#/components/parameters/SheetId" } ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/Row" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }
    post:
      tags: [Rows]
      summary: Add row(s) (adds or updates if exists)
      operationId: addRows
      parameters:
        - { $ref: "#/components/parameters/SheetId" }
        - { $ref: "#/components/parameters/Partial" }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/Row"
                - type: array
                  items: { $ref: "#/components/schemas/Row" }
      responses:
        "200":
          description: Added/updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    oneOf:
                      - $ref: "#/components/schemas/Row"
                      - type: array
                        items: { $ref: "#/components/schemas/Row" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }
    put:
      tags: [Rows]
      summary: Bulk update rows (adds if not exists)
      operationId: bulkUpdateRows
      parameters:
        - { $ref: "#/components/parameters/SheetId" }
        - { $ref: "#/components/parameters/Partial" }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items: { $ref: "#/components/schemas/Row" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/Row" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }
    delete:
      tags: [Rows]
      summary: Delete multiple rows by id
      operationId: deleteRows
      parameters: [ { $ref: "#/components/parameters/SheetId" } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/RowIdList" }
      responses:
        "204": { description: Deleted }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }

  /sheets/{sheetId}/rows/{rowId}:
    get:
      tags: [Rows]
      summary: Get a single row
      operationId: getRow
      parameters:
        - { $ref: "#/components/parameters/SheetId" }
        - { $ref: "#/components/parameters/RowId" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: "#/components/schemas/Row" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }
    put:
      tags: [Rows]
      summary: Update a single row
      operationId: updateRow
      parameters:
        - { $ref: "#/components/parameters/SheetId" }
        - { $ref: "#/components/parameters/RowId" }
        - { $ref: "#/components/parameters/Partial" }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Row" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: "#/components/schemas/Row" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }
    delete:
      tags: [Rows]
      summary: Delete a single row
      operationId: deleteRow
      parameters:
        - { $ref: "#/components/parameters/SheetId" }
        - { $ref: "#/components/parameters/RowId" }
      responses:
        "204": { description: Deleted }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }

  /sheets/{sheetId}/history:
    get:
      tags: [History]
      summary: Get sheet history
      operationId: getSheetHistory
      parameters: [ { $ref: "#/components/parameters/SheetId" } ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/HistoryEntry" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }

  /sheets/{sheetId}/{rowId}/history:
    get:
      tags: [History]
      summary: Get row history
      operationId: getRowHistory
      parameters:
        - { $ref: "#/components/parameters/SheetId" }
        - { $ref: "#/components/parameters/RowId" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/HistoryEntry" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }

  /sheets/{sheetId}/users:
    get:
      tags: [Users]
      summary: Get users for a sheet
      operationId: getUsers
      parameters: [ { $ref: "#/components/parameters/SheetId" } ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }
    post:
      tags: [Users]
      summary: Add a user to a sheet
      operationId: addUser
      parameters: [ { $ref: "#/components/parameters/SheetId" } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/User" }
      responses:
        "200":
          description: Added
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }

  /sheets/{sheetId}/users/{userId}:
    put:
      tags: [Users]
      summary: Update a user in a sheet
      operationId: updateUser
      parameters:
        - { $ref: "#/components/parameters/SheetId" }
        - { $ref: "#/components/parameters/UserId" }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/User" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }
    delete:
      tags: [Users]
      summary: Remove a user from a sheet
      operationId: deleteUser
      parameters:
        - { $ref: "#/components/parameters/SheetId" }
        - { $ref: "#/components/parameters/UserId" }
      responses:
        "204": { description: Deleted }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }

  /sheets/{sheetId}/hook-events:
    get:
      tags: [Hooks]
      summary: Get list of supported hook events
      operationId: getHookEvents
      parameters: [ { $ref: "#/components/parameters/SheetId" } ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { type: string }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }

  /sheets/{sheetId}/hooks:
    get:
      tags: [Hooks]
      summary: Get all hooks on a sheet
      operationId: getHooks
      parameters: [ { $ref: "#/components/parameters/SheetId" } ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/Hook" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }
    post:
      tags: [Hooks]
      summary: Create a new hook
      operationId: createHook
      parameters: [ { $ref: "#/components/parameters/SheetId" } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Hook" }
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: "#/components/schemas/Hook" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }

  /sheets/{sheetId}/hooks/{hookId}:
    get:
      tags: [Hooks]
      summary: Get an existing hook
      operationId: getHook
      parameters:
        - { $ref: "#/components/parameters/SheetId" }
        - { $ref: "#/components/parameters/HookId" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: "#/components/schemas/Hook" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }
    put:
      tags: [Hooks]
      summary: Update an existing hook
      operationId: updateHook
      parameters:
        - { $ref: "#/components/parameters/SheetId" }
        - { $ref: "#/components/parameters/HookId" }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Hook" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: "#/components/schemas/Hook" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }
    delete:
      tags: [Hooks]
      summary: Delete an existing hook
      operationId: deleteHook
      parameters:
        - { $ref: "#/components/parameters/SheetId" }
        - { $ref: "#/components/parameters/HookId" }
      responses:
        "204": { description: Deleted }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }

  /sheets/{sheetId}/fields:
    get:
      tags: [Fields]
      summary: Get fields for a sheet
      operationId: getFields
      parameters: [ { $ref: "#/components/parameters/SheetId" } ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/Field" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }
    post:
      tags: [Fields]
      summary: Add a field to a sheet
      operationId: addField
      parameters: [ { $ref: "#/components/parameters/SheetId" } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Field" }
      responses:
        "200":
          description: Added
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: "#/components/schemas/Field" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }

  /sheets/{sheetId}/fields/{fieldKey}:
    put:
      tags: [Fields]
      summary: Update a field
      operationId: updateField
      parameters:
        - { $ref: "#/components/parameters/SheetId" }
        - { $ref: "#/components/parameters/FieldKey" }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Field" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: "#/components/schemas/Field" }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }
    delete:
      tags: [Fields]
      summary: Delete a field
      operationId: deleteField
      parameters:
        - { $ref: "#/components/parameters/SheetId" }
        - { $ref: "#/components/parameters/FieldKey" }
      responses:
        "204": { description: Deleted }
        "400": { $ref: "#/components/responses/ErrorResponse" }
        default: { $ref: "#/components/responses/ErrorResponse" }

# Global responses not shown above:
x-orca-status-codes:
  documented:
    - 200 Ok
    - 400 Bad request
    - 401 Unauthorized
    - 403 Forbidden
    - 404 Not found
    - 409 Conflict
    - 429 Too Many Requests (Retry-After header)
    - 500 Server Error
    - 501 Not implemented
    - 503 Service Unavailable
